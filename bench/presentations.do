cscript

mata:
unlink("bench/test/incl_main.smcl")
unlink("bench/test/slide1.smcl")
unlink("bench/test/slide2.smcl")
unlink("bench/test/slide3.smcl")
unlink("bench/test/slide4.smcl")
unlink("bench/test/slide2ex1.do")
unlink("bench/test/slide3ex1.do")
end

smclpres using bench\incl_main.do, dir(bench/test) replace

mata:
assert(fileexists("bench/test/incl_main.smcl"))
assert(fileexists("bench/test/slide1.smcl"))
assert(fileexists("bench/test/slide2.smcl"))
assert(fileexists("bench/test/slide3.smcl"))
assert(fileexists("bench/test/slide4.smcl"))
assert(fileexists("bench/test/slide2ex1.do"))
assert(fileexists("bench/test/slide3ex1.do"))

fh = fopen(`"bench/test/incl_main.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf:Including other files}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{center:Maarten Buis}"')
assert(fget(fh)==`"{center:maarten.buis@uni.kn}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p  4  4 2}{view slide1.smcl : section one}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Part one point one{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}part one point two{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p  4  4 2}{view slide4.smcl : conclusion}{p_end}"')
assert(fget(fh)==`"{* slides }{...}"')
assert(fget(fh)==`"{* incl_main.smcl }{...}"')
assert(fget(fh)==`"{* slide1.smcl }{...}"')
assert(fget(fh)==`"{* slide2.smcl }{...}"')
assert(fget(fh)==`"{* slide3.smcl }{...}"')
assert(fget(fh)==`"{* slide4.smcl }{...}"')
assert(fget(fh)==`"{* bottomstyle arrow }{...}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)


fh = fopen(`"bench/test/slide1.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* "' + st_strscalar("c(current_date)") +`"}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:section one}{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: first slide}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Some text"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide1ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        sysuse auto, clear"')
assert(fget(fh)==`"        reg price mpg"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide1ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:     {view incl_main.smcl:index}   {view slide2.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)


fh = fopen(`"bench/test/slide2.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* "' + st_strscalar("c(current_date)") +`"}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:section one} {hline 2} Part one point one{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Another topic}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"Some other text"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide2ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        sysuse nlsw88, clear"')
assert(fget(fh)==`"        reg wage i.race i.union i.south ttl_exp"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide2ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide1.smcl:<<}   {view incl_main.smcl:index}   {view slide3.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide3.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* "' + st_strscalar("c(current_date)") +`"}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:section one} {hline 2} part one point two{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: blup}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide3ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        sysuse cancer"')
assert(fget(fh)==`"        stcox i.drug"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide3ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide2.smcl:<<}   {view incl_main.smcl:index}   {view slide4.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide4.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* "' + st_strscalar("c(current_date)") +`"}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:conclusion}{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Conclusion}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"bla bla bla"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide3.smcl:<<}   {view incl_main.smcl:index}     }"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide1ex1.do"', "r")
assert(fget(fh)==`"sysuse auto, clear"')
assert(fget(fh)==`"reg price mpg"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide2ex1.do"', "r")
assert(fget(fh)==`"sysuse nlsw88, clear"')
assert(fget(fh)==`"reg wage i.race i.union i.south ttl_exp"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide3ex1.do"', "r")
assert(fget(fh)==`"sysuse cancer"')
assert(fget(fh)==`"stcox i.drug"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

unlink("bench/test/incl_main.smcl")
unlink("bench/test/slide1.smcl")
unlink("bench/test/slide2.smcl")
unlink("bench/test/slide3.smcl")
unlink("bench/test/slide4.smcl")
unlink("bench/test/slide1ex1.do")
unlink("bench/test/slide2ex1.do")
unlink("bench/test/slide3ex1.do")
end

mata:
unlink("bench/test/minimalist.smcl")
unlink("bench/test/slide1.smcl")
unlink("bench/test/slide2.smcl")
unlink("bench/test/slide3.smcl")
unlink("bench/test/slide1ex1.do")
unlink("bench/test/slide3ex1.do")
end

smclpres using bench\minimalist.do, dir(bench/test) replace

mata:
assert(fileexists("bench/test/minimalist.smcl"))
assert(fileexists("bench/test/slide1.smcl"))
assert(fileexists("bench/test/slide2.smcl"))
assert(fileexists("bench/test/slide3.smcl"))
assert(fileexists("bench/test/slide1ex1.do"))
assert(fileexists("bench/test/slide3ex1.do"))

fh = fopen(`"bench/test/minimalist.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf:A minimalist example presentation}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{center:Maarten Buis}"')
assert(fget(fh)==`"{center:maarten.buis@uni.kn}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p  4  4 2}{view slide1.smcl : First section}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}First subsection{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Second subsection{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p  4  4 2}{view slide3.smcl : Second section}{p_end}"')
assert(fget(fh)==`"{* slides }{...}"')
assert(fget(fh)==`"{* minimalist.smcl }{...}"')
assert(fget(fh)==`"{* slide1.smcl }{...}"')
assert(fget(fh)==`"{* slide2.smcl }{...}"')
assert(fget(fh)==`"{* slide3.smcl }{...}"')
assert(fget(fh)==`"{* bottomstyle label }{...}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide1.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* "' + st_strscalar("c(current_date)") +`"}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:First section} {hline 2} First subsection{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: First slide}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}Some interesting text about {help regress}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide1ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        sysuse auto, clear"')
assert(fget(fh)==`"        sum price"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide1ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{view minimalist.smcl:index}{right:{view slide2.smcl:next}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide2.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* "' + st_strscalar("c(current_date)") +`"}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:First section} {hline 2} Second subsection{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Second slide}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{phang}Kwaak, kwaak, kikker kwaak. Als ik grote sprongen maak. Doe ik "')
assert(fget(fh)==`"net zo gek als jij, en ik kwaak er ook nog bij.{p_end}"')
assert(fget(fh)==`"{phang}Kwaak, kwaak, kwaak maar door. Kom maar in het kikker koor. "')
assert(fget(fh)==`"Kwaak van dit en kwaak van dat. Kikkers kwaken altijd wat.{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{view minimalist.smcl:index}{right:{view slide3.smcl:next}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide3.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* "' + st_strscalar("c(current_date)") +`"}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Second section}{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Third slide}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{phang}"')
assert(fget(fh)==`"Ia zegt het ezeltje, klim maar op mijn rug. Ik draag jou de hele weg, heen"')
assert(fget(fh)==`"end weer terug."')
assert(fget(fh)==`""')
assert(fget(fh)==`"{phang}"')
assert(fget(fh)==`"Ia zegt het ezeltje. Ik loop van hier naar daar, en als je met me mee "')
assert(fget(fh)==`"wil hoor ik graag, ia ia."')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide3ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        reg price i.rep78 "')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide3ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{view minimalist.smcl:index}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide1ex1.do"', "r")
assert(fget(fh)==`"sysuse auto, clear"')
assert(fget(fh)==`"sum price"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/test/slide3ex1.do"', "r")
assert(fget(fh)==`"reg price i.rep78 "')
assert(fget(fh)==J(0,0,""))
fclose(fh)

unlink("bench/test/minimalist.smcl")
unlink("bench/test/slide1.smcl")
unlink("bench/test/slide2.smcl")
unlink("bench/test/slide3.smcl")
unlink("bench/test/slide1ex1.do")
unlink("bench/test/slide3ex1.do")
end

mata: unlink("bench/mata/presentation/horse.dta")
smclpres using bench/mata/source/presentation.do, dir(bench/mata/presentation) replace

mata:
fh = fopen(`"bench/mata/presentation/presentation.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Mata}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:Maarten Buis}"')
assert(fget(fh)==`"{center:University of Konstanz}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:maarten.buis@uni.kn}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:     {view index.smcl:index}   {view slide1.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{* slides }{...}"')
assert(fget(fh)==`"{* presentation.smcl }{...}"')
assert(fget(fh)==`"{* index.smcl }{...}"')
assert(fget(fh)==`"{* slide1.smcl }{...}"')
assert(fget(fh)==`"{* slide2.smcl }{...}"')
assert(fget(fh)==`"{* slide3.smcl }{...}"')
assert(fget(fh)==`"{* slide4.smcl }{...}"')
assert(fget(fh)==`"{* slide5.smcl }{...}"')
assert(fget(fh)==`"{* slide6.smcl }{...}"')
assert(fget(fh)==`"{* slide7.smcl }{...}"')
assert(fget(fh)==`"{* slide8.smcl }{...}"')
assert(fget(fh)==`"{* slide9.smcl }{...}"')
assert(fget(fh)==`"{* slide10.smcl }{...}"')
assert(fget(fh)==`"{* slide11.smcl }{...}"')
assert(fget(fh)==`"{* slide12.smcl }{...}"')
assert(fget(fh)==`"{* slide13.smcl }{...}"')
assert(fget(fh)==`"{* slide14.smcl }{...}"')
assert(fget(fh)==`"{* slide15.smcl }{...}"')
assert(fget(fh)==`"{* slide16.smcl }{...}"')
assert(fget(fh)==`"{* slide17.smcl }{...}"')
assert(fget(fh)==`"{* slide18.smcl }{...}"')
assert(fget(fh)==`"{* slide19.smcl }{...}"')
assert(fget(fh)==`"{* slide20.smcl }{...}"')
assert(fget(fh)==`"{* slide22.smcl }{...}"')
assert(fget(fh)==`"{* slide23.smcl }{...}"')
assert(fget(fh)==`"{* slide24.smcl }{...}"')
assert(fget(fh)==`"{* slide25.smcl }{...}"')
assert(fget(fh)==`"{* slide26.smcl }{...}"')
assert(fget(fh)==`"{* slide27.smcl }{...}"')
assert(fget(fh)==`"{* slide28.smcl }{...}"')
assert(fget(fh)==`"{* slide29.smcl }{...}"')
assert(fget(fh)==`"{* slide30.smcl }{...}"')
assert(fget(fh)==`"{* slide31.smcl }{...}"')
assert(fget(fh)==`"{* slide32.smcl }{...}"')
assert(fget(fh)==`"{* slide33.smcl }{...}"')
assert(fget(fh)==`"{* slide34.smcl }{...}"')
assert(fget(fh)==`"{* slide35.smcl }{...}"')
assert(fget(fh)==`"{* slide36.smcl }{...}"')
assert(fget(fh)==`"{* slide37.smcl }{...}"')
assert(fget(fh)==`"{* slide38.smcl }{...}"')
assert(fget(fh)==`"{* slide39.smcl }{...}"')
assert(fget(fh)==`"{* slide40.smcl }{...}"')
assert(fget(fh)==`"{* slide41.smcl }{...}"')
assert(fget(fh)==`"{* slide42.smcl }{...}"')
assert(fget(fh)==`"{* slide43.smcl }{...}"')
assert(fget(fh)==`"{* slide44.smcl }{...}"')
assert(fget(fh)==`"{* slide45.smcl }{...}"')
assert(fget(fh)==`"{* slide46.smcl }{...}"')
assert(fget(fh)==`"{* slide47.smcl }{...}"')
assert(fget(fh)==`"{* slide48.smcl }{...}"')
assert(fget(fh)==`"{* slide49.smcl }{...}"')
assert(fget(fh)==`"{* slide50.smcl }{...}"')
assert(fget(fh)==`"{* slide51.smcl }{...}"')
assert(fget(fh)==`"{* slide52.smcl }{...}"')
assert(fget(fh)==`"{* slide53.smcl }{...}"')
assert(fget(fh)==`"{* slide54.smcl }{...}"')
assert(fget(fh)==`"{* slide55.smcl }{...}"')
assert(fget(fh)==`"{* slide56.smcl }{...}"')
assert(fget(fh)==`"{* slide57.smcl }{...}"')
assert(fget(fh)==`"{* slide58.smcl }{...}"')
assert(fget(fh)==`"{* slide59.smcl }{...}"')
assert(fget(fh)==`"{* slide60.smcl }{...}"')
assert(fget(fh)==`"{* slide61.smcl }{...}"')
assert(fget(fh)==`"{* slide62.smcl }{...}"')
assert(fget(fh)==`"{* slide63.smcl }{...}"')
assert(fget(fh)==`"{* slide64.smcl }{...}"')
assert(fget(fh)==`"{* slide65.smcl }{...}"')
assert(fget(fh)==`"{* slide66.smcl }{...}"')
assert(fget(fh)==`"{* slide67.smcl }{...}"')
assert(fget(fh)==`"{* slide68.smcl }{...}"')
assert(fget(fh)==`"{* slide69.smcl }{...}"')
assert(fget(fh)==`"{* slide70.smcl }{...}"')
assert(fget(fh)==`"{* slide71.smcl }{...}"')
assert(fget(fh)==`"{* slide72.smcl }{...}"')
assert(fget(fh)==`"{* slide73.smcl }{...}"')
assert(fget(fh)==`"{* slide74.smcl }{...}"')
assert(fget(fh)==`"{* slide75.smcl }{...}"')
assert(fget(fh)==`"{* slide76.smcl }{...}"')
assert(fget(fh)==`"{* slide77.smcl }{...}"')
assert(fget(fh)==`"{* slide78.smcl }{...}"')
assert(fget(fh)==`"{* slide79.smcl }{...}"')
assert(fget(fh)==`"{* slide80.smcl }{...}"')
assert(fget(fh)==`"{* slide81.smcl }{...}"')
assert(fget(fh)==`"{* slide82.smcl }{...}"')
assert(fget(fh)==`"{* slide83.smcl }{...}"')
assert(fget(fh)==`"{* slide84.smcl }{...}"')
assert(fget(fh)==`"{* slide85.smcl }{...}"')
assert(fget(fh)==`"{* slide86.smcl }{...}"')
assert(fget(fh)==`"{* slide87.smcl }{...}"')
assert(fget(fh)==`"{* slide21.smcl }{...}"')
assert(fget(fh)==`"{* slide88.smcl }{...}"')
assert(fget(fh)==`"{* bottomstyle arrow }{...}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)


fh = fopen(`"bench/mata/presentation/index.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf:Table of content}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p  4  4 2}{bf:Basics of mata}{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide1.smcl : What is Mata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide2.smcl : Mata and Stata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide3.smcl : When to use which}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide4.smcl : entering and leaving Mata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide5.smcl : Try it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide6.smcl : things persist between Mata sessions}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide7.smcl : variables}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide8.smcl : creating variables}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}matrix operations {p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide9.smcl : arithmatic}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide10.smcl : elementwise operations}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide11.smcl : Subscripting}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide12.smcl : logic }{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide13.smcl : elementwise logic}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}precision{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide14.smcl : binary versus decimal}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide15.smcl : how a number is stored}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide16.smcl : rounding errors: adding and subtracting}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}moving data between Stata and Mata{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide17.smcl : reading data from Stata in Mata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide18.smcl : storing data from Mata in Stata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide19.smcl : views and subviews}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide20.smcl : reading and writing matrices and macros from Stata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 16 16 2}{view slide21.smcl : macros and scalars in Stata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Application: linear regression and instrumental variable regression{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide22.smcl : linear regression: getting variables}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide23.smcl : Try it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide24.smcl : Parameter estimates}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide25.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide26.smcl : The variance covariance matrix}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide27.smcl : Try it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide28.smcl : Export and display the results in Stata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide29.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p  4  4 2}{bf:Functions in Mata}{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}basics{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide30.smcl : functions}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide31.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide32.smcl : Conditional statements}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide33.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide34.smcl : loops}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide35.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide36.smcl : declare your variables}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide37.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide38.smcl : Make your function part of a Stata program}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide39.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide40.smcl : Turn it into an .ado file}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide41.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Linear regression and instrumental variable regression{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide42.smcl : turn our Mata code into a function}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide43.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide44.smcl : Turn it into a Stata program}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide45.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide46.smcl : Turn it into a .ado file}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide47.smcl : Do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Maximum likelihood: logit and Poisson regression{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide48.smcl : Maximum Likelihood}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide49.smcl : Maximum Likelihood in Mata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide50.smcl : do it yourself poisson}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide51.smcl : include in Stata program}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide52.smcl : do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide53.smcl : Allow factor varialbes }{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide54.smcl : do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide55.smcl : Starting values}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide56.smcl : do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide57.smcl : allow weights}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide58.smcl : do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide59.smcl : Make an ado file}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide60.smcl : do it yourself}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Certification{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide61.smcl : Certification script}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide62.smcl : What is in a certification script}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p  4  4 2}{bf:Advanced data types in Mata}{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Pointers{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide63.smcl : What is a pointer}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide64.smcl : Passing functions to functions}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide65.smcl : Try it yourself: approximating a function with a linear spline}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide66.smcl : Collecting different things under a single name}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide67.smcl : Using pointers to create an irregular array}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide68.smcl : Try it yourself: 3D array}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}associative array{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide69.smcl : What is an associative array}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide70.smcl : Example: a bibliography in Mata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}struct{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide71.smcl : What is a struct}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide72.smcl : Try it yourself: approximating a function with a linear spline}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}class{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide73.smcl : What is a class}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide74.smcl : 3D array}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide75.smcl : Try it yourself: approximating a function with a linear spline}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p  4  4 2}{bf:Build your own class}{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide76.smcl : The goal}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Getting basic working code{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide77.smcl : Counting words}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide78.smcl : punctuation}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide79.smcl : Capital letters}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide80.smcl : Common "meaningless" words}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide81.smcl : Finding the most common words}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide82.smcl : Export the results to Stata}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Turning it into a Mata class{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide83.smcl : Getting started}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide84.smcl : Passing parameters to our class}{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide85.smcl : private and public}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}What next{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide86.smcl : Next steps}{p_end}"')
assert(fget(fh)==`"{* tocline }{p  8  8 2}Wrapping up{p_end}"')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide87.smcl : Useful sources}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* tocline }{p 12 12 2}{view slide88.smcl : References}{p_end}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide1.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: What is Mata}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}Mata is a programming language, that works well with{p_end}"')
assert(fget(fh)==`"{pmore}matrices{p_end}"')
assert(fget(fh)==`"{pmore}strings{p_end}"')
assert(fget(fh)==`"{pmore}Stata{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}Stata reads instructions (commands) one line at the time{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Mata is compiled, making it faster "')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view presentation.smcl:<<}   {view index.smcl:index}   {view slide2.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide2.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Mata and Stata}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Stata is high level language, which means that we humans can focus on the big "')
assert(fget(fh)==`"picture because a lot of the details have already been preprogrammed."')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"For example, in Stata we can type {cmd:regress income female educ}, and we "')
assert(fget(fh)==`"can think of this as a shorthand for the following conversation between me and "')
assert(fget(fh)==`"Stata:"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pmore}{bf:me}:    Hi Stata. I want to run a linear regression today{p_end}"')
assert(fget(fh)==`"{pmore}{bf:Stata}: Hi Maarten. Great, I know how to do that. What dependent "')
assert(fget(fh)==`"variable do you want to use?{p_end}"')
assert(fget(fh)==`"{pmore}{bf:me}:      income{p_end}"')
assert(fget(fh)==`"{pmore}{bf:Stata}: OK, I found it. Do you want to use any independent variables?{p_end}"')
assert(fget(fh)==`"{pmore}{bf:me}:    Yes, female and educ{p_end}"')
assert(fget(fh)==`"{pmore}{bf:Stata}: Ok, I also found those. Do you want to limit the sample in "')
assert(fget(fh)==`"any way? Do you want to use weights? Is there a specific type of standard error"')
assert(fget(fh)==`"you wish to see?{p_end}"')
assert(fget(fh)==`"{pmore}{bf:me}:    No, I am good. You can start now.{p_end}"')
assert(fget(fh)==`"{pmore}{bf:Stata}: OK, here are your results.{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Mata is a lower level language, which means the humans have more control and it "')
assert(fget(fh)==`"often runs faster because less is preprogrammed."')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"If I try to do the same as above then we are going to have a very long conversation..."')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pmore}{bf:me}:    Hi Mata. I want to run a linear regression today{p_end}"')
assert(fget(fh)==`"{pmore}{bf:Mata}:  Hi Maarten. What is a "linear regression"?{p_end}"')
assert(fget(fh)==`"{pmore}{bf:me}:    Oh, it is a model where look at the relationship between variables{p_end}"')
assert(fget(fh)==`"{pmore}{bf:Mata}:  What is a variable?{p_end}"')
assert(fget(fh)==`"{pmore}{bf:me}:    Oh, it is a column in a matrix{p_end}"')
assert(fget(fh)==`"{pmore}{bf:Mata}:  I know what that is. Where shall I find that matrix? How shall "')
assert(fget(fh)==`"we keep track of these “variables”? I love integers. Names, you say? Are those "')
assert(fget(fh)==`"like strings? I have really long strings. Really, however, integers are better.{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide1.smcl:<<}   {view index.smcl:index}   {view slide3.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide3.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: When to use which}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}Stata is better for . . .{p_end}"')
assert(fget(fh)==`"{pmore}Parsing standard syntax{p_end}"')
assert(fget(fh)==`"{pmore}Data management{p_end}"')
assert(fget(fh)==`"{pmore}Scripting existing Stata commands (writing a .do file to do an analysis){p_end}"')
assert(fget(fh)==`"{pmore}Outputting (usually){p_end}"')
assert(fget(fh)==`"{pmore}Posting saved results{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}Mata is better for . . .{p_end}"')
assert(fget(fh)==`"{pmore}Parsing non-standard syntax (including files){p_end}"')
assert(fget(fh)==`"{pmore}Performing matrix operations{p_end}"')
assert(fget(fh)==`"{pmore}Non-scripting applications{p_end}"')
assert(fget(fh)==`"{pmore}Outputting (when complicated){p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide2.smcl:<<}   {view index.smcl:index}   {view slide4.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide4.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: entering and leaving Mata}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}You can enter Mata by typing in Stata either {cmd:mata} or {cmd:mata:}{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"You can leave Mata, and enter Stata again, by typing {cmd:end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}{cmd:mata} will continue executing till it reaches {cmd:end} even if an "')
assert(fget(fh)==`"error occured{p_end}"')
assert(fget(fh)==`"{pmore}This is helpful when using Mata interactively to try things out{p_end}"')
assert(fget(fh)==`"{pmore}When trying things out, errors are expected. It is convenient when those "')
assert(fget(fh)==`"errors have not other consequences than an error message.{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}{cmd:mata:} stops as soon as an error occured and drop you back into Stata.{p_end}"')
assert(fget(fh)==`"{pmore}This is helpful when programming{p_end} "')
assert(fget(fh)==`"{pmore}This makes it easier to find where the bug is{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Alternatively, you can pass a single line from Stata to Mata by typing {cmd:mata: something_Mata_understands}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide3.smcl:<<}   {view index.smcl:index}   {view slide5.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide5.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Try it yourself}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Enter Mata using {cmd:mata}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Type {cmd:1 + 2}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"OK, so if we type an expression which has an answer, that answer is displayed on"')
assert(fget(fh)==`"screen. In fact, that answer is not stored anywhere."')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Type {cmd:a = 1 + 2}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Type {cmd:a}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"OK, so with an equal sign we can store answers"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Lets make an error: type {cmd:a = b}. We have not defined {cmd:b} yet, so what "')
assert(fget(fh)==`"can Mata do other than return an error?"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Notice that the command prompt is still {cmd::}, i.e. we are still in Mata"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Lets fix the error, type {cmd:b = "Hello"} and {cmd:a = b}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Leave Mata by typing {cmd:end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"We can try one-line execution of Mata commands from Stata: Type {cmd:mata: 1 + 2}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Lets try the same sequence of commands but with {cmd:mata:} instead of "')
assert(fget(fh)==`"{cmd:mata}. You can copy the commands below in the .do file editor and run it:"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"    clear mata"')
assert(fget(fh)==`"    mata:"')
assert(fget(fh)==`"    1 + 2"')
assert(fget(fh)==`"    a = 1 + 2"')
assert(fget(fh)==`"    a"')
assert(fget(fh)==`"    a = b"')
assert(fget(fh)==`"    b = "Hello""')
assert(fget(fh)==`"    a = b"')
assert(fget(fh)==`"    end"')
assert(fget(fh)==`"{txt}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide4.smcl:<<}   {view index.smcl:index}   {view slide6.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide6.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: things persist between Mata sessions}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Things you create in Mata persist between Mata sessions untill you clear Mata or"')
assert(fget(fh)==`"you close Stata"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"That is why I added {cmd:clear mata} to the last exercise:{p_end}"')
assert(fget(fh)==`"{pmore}The purpose was for the first line {cmd:a = b} to result in an error.{p_end} "')
assert(fget(fh)==`"{pmore}However, in the previous exercise we successfuly created {cmd:b}, which "')
assert(fget(fh)==`"will persist between sessions, so no error would occur.{p_end}"')
assert(fget(fh)==`"{pmore}To make the desired error occur we needed to explicitly remove it{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide6ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        a = 1"')
assert(fget(fh)==`"        b = 2"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        mata: a"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        a + b"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        mata clear"')
assert(fget(fh)==`"        a"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide6ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide5.smcl:<<}   {view index.smcl:index}   {view slide7.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide7.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: variables}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"In Mata something is either a variable or a function"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Functions are like programs. We will discuss them later"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Anything that is not a function is a variable"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"The purpose of a variable is to store information"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Variables differ depending on what is stored and how it is organized "')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}In Mata a variable can contain either: {p_end}"')
assert(fget(fh)==`"{pmore}A real number (real){p_end}"')
assert(fget(fh)==`"{pmore}A complex number (complex){p_end}"')
assert(fget(fh)==`"{pmore}Text (string){p_end}"')
assert(fget(fh)==`"{pmore}The address where another object is stored in memory (pointer){p_end}"')
assert(fget(fh)==`"{pmore}A set of variables tied together under one name (struct){p_end}"')
assert(fget(fh)==`"{pmore}A set of variables and functions tied together under one name (class){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}This information can be organized as a:{p_end}"')
assert(fget(fh)==`"{pmore}scalar{p_end}"')
assert(fget(fh)==`"{pmore}rowvector{p_end}"')
assert(fget(fh)==`"{pmore}colvector{p_end}"')
assert(fget(fh)==`"{pmore}matrix{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide6.smcl:<<}   {view index.smcl:index}   {view slide8.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)


fh = fopen(`"bench/mata/presentation/slide8.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} How is Mata different from Stata{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: creating variables}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"You create a variable with {cmd:=}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide8ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        A = 1 , 2 \"')
assert(fget(fh)==`"            3 , 4"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A    "')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide8ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Some functions return things that can be stored as a variable"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide8ex2 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        A = J(3,3,34)"')
assert(fget(fh)==`"        A"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A = I(3,3)"')
assert(fget(fh)==`"        A"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A = J(2,1,a)"')
assert(fget(fh)==`"        A"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide8ex2.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"You can have matrices with 0 rows or columns or both. This can be helpful "')
assert(fget(fh)==`"starting point when you want to successively add collumns or rows to a matrix."')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pmore}"')
assert(fget(fh)==`"Note: Starting with complete matrix and successively changing the content of rows"')
assert(fget(fh)==`"and columns is a lot quicker than changing the number of rows and columns of a "')
assert(fget(fh)==`"matrix. "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide8ex3 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        A = J(2,0,.)"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A = A , (2 \ 3)"')
assert(fget(fh)==`"        A"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide8ex3.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"You can chain assignments, which can be an easy way to initialize multiple variables"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide8ex4 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        a = b = 2"')
assert(fget(fh)==`"        a"')
assert(fget(fh)==`"        b"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide8ex4.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"You can be more fancy with that"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide8ex5 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        fraction = 2 /(sum=2+3)"')
assert(fget(fh)==`"        fraction"')
assert(fget(fh)==`"        sum"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide8ex5.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide7.smcl:<<}   {view index.smcl:index}   {view slide9.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide8ex1.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"A = 1 , 2 \"')
assert(fget(fh)==`"    3 , 4"')
assert(fget(fh)==`""')
assert(fget(fh)==`"A    "')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide8ex2.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"A = J(3,3,34)"')
assert(fget(fh)==`"A"')
assert(fget(fh)==`""')
assert(fget(fh)==`"A = I(3,3)"')
assert(fget(fh)==`"A"')
assert(fget(fh)==`""')
assert(fget(fh)==`"A = J(2,1,a)"')
assert(fget(fh)==`"A"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide8ex3.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"A = J(2,0,.)"')
assert(fget(fh)==`""')
assert(fget(fh)==`"A = A , (2 \ 3)"')
assert(fget(fh)==`"A"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide8ex4.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"a = b = 2"')
assert(fget(fh)==`"a"')
assert(fget(fh)==`"b"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide8ex5.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"fraction = 2 /(sum=2+3)"')
assert(fget(fh)==`"fraction"')
assert(fget(fh)==`"sum"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide9.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} matrix operations {p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: arithmatic}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Matrix addition, subtraction, and multiplication work as you would expect with "')
assert(fget(fh)==`"the {cmd:+}, {cmd:-}, and {cmd:*} operators:"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide9ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        A = 1 , 2 \        "')
assert(fget(fh)==`"            3 , 2           "')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        b = 1     \"')
assert(fget(fh)==`"            2"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        C = 2 , 4 \   "')
assert(fget(fh)==`"            1 , 3    "')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A + C "')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A - C "')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A * C "')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A * b"')
assert(fget(fh)==`"        end "')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide9ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Multiplication of a matrix by a scalar works as expected"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"By analogy, division by a scalar works just fine with the {cmd:/} operator"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"The {cmd:/} operator does not work matrix division"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide9ex2 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        A*2"')
assert(fget(fh)==`"        A/2"')
assert(fget(fh)==`"        A / C"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide9ex2.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"You can transpose a matrix with {cmd:'}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide9ex3 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        b'"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide9ex3.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide8.smcl:<<}   {view index.smcl:index}   {view slide10.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide9ex1.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"A = 1 , 2 \        "')
assert(fget(fh)==`"    3 , 2           "')
assert(fget(fh)==`""')
assert(fget(fh)==`"b = 1     \"')
assert(fget(fh)==`"    2"')
assert(fget(fh)==`""')
assert(fget(fh)==`"C = 2 , 4 \   "')
assert(fget(fh)==`"    1 , 3    "')
assert(fget(fh)==`""')
assert(fget(fh)==`"A + C "')
assert(fget(fh)==`""')
assert(fget(fh)==`"A - C "')
assert(fget(fh)==`""')
assert(fget(fh)==`"A * C "')
assert(fget(fh)==`""')
assert(fget(fh)==`"A * b"')
assert(fget(fh)==`"end "')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide9ex2.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"A*2"')
assert(fget(fh)==`"A/2"')
assert(fget(fh)==`"A / C"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide9ex3.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"b'"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)


fh = fopen(`"bench/mata/presentation/slide10.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} matrix operations {p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: elementwise operations}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Alternatively, you sometimes want to do something element by element "')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"For that you can add a colon in front of many operators"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide10ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        A"')
assert(fget(fh)==`"        b"')
assert(fget(fh)==`"        C"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A:*C"')
assert(fget(fh)==`"        A:*b"')
assert(fget(fh)==`"        A:*b'"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide10ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pmore}"')
assert(fget(fh)==`"What rules does {cmd::*} apply to these matrices?"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide9.smcl:<<}   {view index.smcl:index}   {view slide11.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide10ex1.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"A"')
assert(fget(fh)==`"b"')
assert(fget(fh)==`"C"')
assert(fget(fh)==`""')
assert(fget(fh)==`"A:*C"')
assert(fget(fh)==`"A:*b"')
assert(fget(fh)==`"A:*b'"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)


fh = fopen(`"bench/mata/presentation/slide11.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} matrix operations {p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Subscripting}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"We can get at cells in a matrix using {cmd:[]}:"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide11ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        A"')
assert(fget(fh)==`"        b"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        A[2,1]"')
assert(fget(fh)==`"        b[2]"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide11ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"We can also get at multiple cells"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide11ex2 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        D = A, b"')
assert(fget(fh)==`"        D"')
assert(fget(fh)==`"        D[2,.]"')
assert(fget(fh)==`"        D[.,2]"')
assert(fget(fh)==`"        D[1,(2,3)]"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide11ex2.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"We can also specify the starting cell and the ending cell, and get the entire "')
assert(fget(fh)==`"submatrix between those using {cmd:[||]}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"This can be faster"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide11ex3 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        D[|1,2 \ 1,3|]"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide11ex3.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide10.smcl:<<}   {view index.smcl:index}   {view slide12.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide11ex1.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"A"')
assert(fget(fh)==`"b"')
assert(fget(fh)==`""')
assert(fget(fh)==`"A[2,1]"')
assert(fget(fh)==`"b[2]"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide11ex2.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"D = A, b"')
assert(fget(fh)==`"D"')
assert(fget(fh)==`"D[2,.]"')
assert(fget(fh)==`"D[.,2]"')
assert(fget(fh)==`"D[1,(2,3)]"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide11ex3.do"', "r")
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"D[|1,2 \ 1,3|]"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide23.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Basics of mata} {hline 2} Application: linear regression and instrumental variable regression{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Try it yourself}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"We are going to implement a IV regression via two stage least squares "')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}The data is hsng2{p_end}"')
assert(fget(fh)==`"{pstd}The dependent variable {cmd:y} is rent{p_end}"')
assert(fget(fh)==`"{pstd}The endogenous variable {cmd:Y} is hsngval{p_end}"')
assert(fget(fh)==`"{pstd}The instruments {cmd:X2} are faminc reg2 reg3 and reg4{p_end}"')
assert(fget(fh)==`"{pstd}The other exogenous variables {cmd:X1} is pcturban{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"We need to load three matrices:{p_end}"')
assert(fget(fh)==`"{pmore}{cmd:y}{p_end}"')
assert(fget(fh)==`"{pmore}{cmd:X} = {cmd:Y}, {cmd:X1}, {cmd:cons}{p_end}"')
assert(fget(fh)==`"{pmore}{cmd:Z} = {cmd:X1}, {cmd:X2}, {cmd:cons}{p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Open the dataset using {cmd:webuse}, create a new variable cons containing 1, and load the "')
assert(fget(fh)==`"three matrices in Mata"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* apcodefile tsls01.do (solution) }{pstd}{stata "doedit tsls01.do":(solution)}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide22.smcl:<<}   {view index.smcl:index}   {view slide24.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/tsls01.do"', "r")
assert(fget(fh)==`"webuse hsng2, clear"')
assert(fget(fh)==`""')
assert(fget(fh)==`"gen byte cons = 1"')
assert(fget(fh)==`""')
assert(fget(fh)==`"gen byte touse = !missing(rent, pcturban, faminc, reg2, reg3, reg4, hsngval)"')
assert(fget(fh)==`""')
assert(fget(fh)==`"mata:"')
assert(fget(fh)==`"y = X = Z = ."')
assert(fget(fh)==`"st_view(y,.,"rent", "touse")"')
assert(fget(fh)==`"st_view(X,.,"hsngval pcturban cons", "touse")"')
assert(fget(fh)==`"st_view(Z,.,"pcturban faminc reg2 reg3 reg4 cons", "touse")"')
assert(fget(fh)==`"end"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide40.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Functions in Mata} {hline 2} basics{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Turn it into an .ado file}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Now all we need to do is clean it up and store it as an .ado file"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* codefile my_median.ado The file }{pstd}{stata "doedit my_median.ado":The file}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide40ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        sysuse auto"')
assert(fget(fh)==`"        my_median price mpg"')
assert(fget(fh)==`"        sum price mpg, d"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide40ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide39.smcl:<<}   {view index.smcl:index}   {view slide41.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)


fh = fopen(`"bench/mata/presentation/slide49.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Functions in Mata} {hline 2} Maximum likelihood: logit and Poisson regression{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: Maximum Likelihood in Mata}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"In Mata you can use {helpb mf_moptimize:moptimize} to find the maximum likelihood"')
assert(fget(fh)==`"estimates and its variance covariance matrix"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"In fact, it is more general than that: it can be used to maximize or minimize any"')
assert(fget(fh)==`"function, e.g. find gmm estimates. "')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Using {cmd:moptimize} is a multi-step process{p_end}"')
assert(fget(fh)==`"{pmore}1. Create a function that takes parameter values and data and returns the "')
assert(fget(fh)==`"log-likelihood value (or gmm, or ...){p_end}"')
assert(fget(fh)==`"{pmore}2. Initialize, i.e. create an object that stores everything Mata needs for"')
assert(fget(fh)==`"this problem{p_end}"')
assert(fget(fh)==`"{pmore}3. Give that object the information it needs, at least the function and "')
assert(fget(fh)==`"the data{p_end}"')
assert(fget(fh)==`"{pmore}4. Let moptimize find the optimum{p_end}"')
assert(fget(fh)==`"{pmore}5. Display the results{p_end}"')
assert(fget(fh)==`"{pmore}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* ex slide49ex1 }{...}"')
assert(fget(fh)==`"{cmd}"')
assert(fget(fh)==`"        sysuse auto, clear"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        mata:"')
assert(fget(fh)==`"        mata clear"')
assert(fget(fh)==`"        mata set matastrict on"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        // Step 1"')
assert(fget(fh)==`"        void logiteval(transmorphic M, real rowvector b, real colvector lnf)"')
assert(fget(fh)==`"        {"')
assert(fget(fh)==`"            real colvector xb"')
assert(fget(fh)==`"            real colvector y"')
assert(fget(fh)==`"            "')
assert(fget(fh)==`"            xb = moptimize_util_xb(M, b, 1)"')
assert(fget(fh)==`"            y  = moptimize_util_depvar(M,1)"')
assert(fget(fh)==`"            "')
assert(fget(fh)==`"            lnf = y:*ln(invlogit(xb)) + (1:-y):*ln(invlogit(-xb)) "')
assert(fget(fh)==`"        }"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        // Step 2"')
assert(fget(fh)==`"        M = moptimize_init()"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        // Step 3"')
assert(fget(fh)==`"        moptimize_init_evaluator(M, &logiteval())"')
assert(fget(fh)==`"        moptimize_init_depvar(M, 1, "foreign")"')
assert(fget(fh)==`"        moptimize_init_eq_indepvars(M,1,"price weight") "')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        // Step 4"')
assert(fget(fh)==`"        moptimize(M)"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        // Step 5"')
assert(fget(fh)==`"        moptimize_result_display(M)"')
assert(fget(fh)==`"        end"')
assert(fget(fh)==`"        "')
assert(fget(fh)==`"        logit foreign price weight"')
assert(fget(fh)==`"{txt}{...}"')
assert(fget(fh)==`"{pstd}({stata "do slide49ex1.do":{it:click to run}}){p_end}"')
assert(fget(fh)==`""')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* endex }{...}"')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"In the evaluator I used {cmd:invlogit(-xb)} instead of {cmd:(1-invlogit(xb))}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"The logistic distribution is a symmetric distribution around 0, very much like "')
assert(fget(fh)==`"the standard normal distribution."')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"You may (vaguely) remember that 1-Phi(z) = Phi(z) "')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pmore}"')
assert(fget(fh)==`"(There was a table at the end"')
assert(fget(fh)==`"of your Statistics book giving you the CDF for the standard normal distribution, "')
assert(fget(fh)==`"and you needed to use that to find the probability that a drawing a value more "')
assert(fget(fh)==`"than some {it:z})"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"Similarly, {cmd:invlogit(-xb)} is the same as {cmd:(1-invlogit(xb))}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"However, the former is easier for computers than the latter (precision)"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"If you want to write a Maximum Likelihood model in Stata/Mata then ({view slide88.smcl##gould_etal10:Gould, Pitblado, and Poi 2010})"')
assert(fget(fh)==`"is highly recommended. "')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide48.smcl:<<}   {view index.smcl:index}   {view slide50.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

assert(fileexists("bench/mata/presentation/horse.dta"))


fh = fopen(`"bench/mata/presentation/slide62.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`"{p}{bf:Functions in Mata} {hline 2} Certification{p_end}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: What is in a certification script}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"For estimation commands a minimalist certification script that is quick to write"')
assert(fget(fh)==`"and can pick up a lot of bugs before you go public would consider:"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pmore}"')
assert(fget(fh)==`"Often there are special cases of your model, where you know what the solution is."')
assert(fget(fh)==`"In our cases, that would be the model without covariates."')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pmore}"')
assert(fget(fh)==`"You can "manually" implement an {cmd:if} condition by just dropping the unwanted"')
assert(fget(fh)==`"observations. Adding an {cmd:if} condition and the manual way, should yield the"')
assert(fget(fh)==`"exact same results"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pmore}"')
assert(fget(fh)==`"You can "manually" implement {cmd:fweight}s by {helpb expand:expanding} the "')
assert(fget(fh)==`"dataset. Adding an {cmd:fweight}s and the manual way, should yield the"')
assert(fget(fh)==`"exact same results"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"A more complete certification script would also certify the (Mata) subroutines"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"You can read more on certification scripts in ({view slide88.smcl##gould01:Gould 2001}; {view slide88.smcl##buis14:Buis 2014}) and "')
assert(fget(fh)==`"{help cscript}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{pstd}"')
assert(fget(fh)==`"A basic certification script for the {cmd:my_logit} command is here:"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{* codefile my_logit_cert.do certification script }{pstd}{stata "doedit my_logit_cert.do":certification script}{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:{view slide61.smcl:<<}   {view index.smcl:index}   {view slide63.smcl:>>}}"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

fh = fopen(`"bench/mata/presentation/slide88.smcl"', "r")
assert(fget(fh)==`"{smcl}"')
assert(fget(fh)==`"{* 17 Feb 2022}{...}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{center:{bf: References}}"')
assert(fget(fh)==`""')
assert(fget(fh)==`"{marker buis14}{...}"')
assert(fget(fh)==`"{p 4 8  2}Buis, Maarten L. (2014), "Stata tip 120: Certifying subroutines", {it:Stata Journal}, {bf:14}(2), pp. 449-450.{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{marker gould01}{...}"')
assert(fget(fh)==`"{p 4 8  2}Gould, William W. (2001), "Statistical software certification", {it:Stata Journal}, {bf:1}(1), pp. 29-50.{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{marker gould_etal10}{...}"')
assert(fget(fh)==`"{p 4 8 2}Gould, William W.; Pitblado, Jeffrey; and Poi, Brian (2010), {it:Maximum Likelihood Estimation with Stata, Fourth Edition}.  College Station, TX: Stata Press.{p_end}"')
assert(fget(fh)==`" "')
assert(fget(fh)==`" "')
assert(fget(fh)==`"{* /p}{hline}"')
assert(fget(fh)==`"{* bottombar }{center:     {view index.smcl:index}     }"')
assert(fget(fh)==`"{hline}"')
assert(fget(fh)==J(0,0,""))
fclose(fh)

end
exit
